{{template "base" .}}

{{define "title"}}Virtual Terminal{{end}}

{{define "content"}}
<h2 class="text-center mt-3">Virtual Terminal</h2>
<hr>
<div class="alert alert-danger text-center d-none" id="card-messages"></div>

<form action="payment-successed" method="post" name="charge_form" id="charge_form"
    class="d-block needs-validation charge-form" autocomplete="off" novaliadte>

    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" class="form-control" id="amount" name="amount" autocomplete="ammount-new" required>
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Name</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder-name" autocomplete="cardholder-name-new" required>
    </div>

    <div class="mb-3">
        <label for="cardholder-email" class="form-label">CardHolder Email</label>
        <input type="email" class="form-control" id="cardholder-email" name="cardholder-email" autocomplete="cardholder-email-new" required>
    </div>

    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div class="alert-danger text-center" id="card-errors" role="alert"></div>
        <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>

    <hr>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <input type="hidden" name="payment_intent" id="payment_intent">
    <input type="hidden" name="payment_method" id="payment_method">
    <input type="hidden" name="payment_amount" id="payment_amount">
    <input type="hidden" name="payment_currency" id="payment_currency">
</form>


{{end}}

{{define "js"}}
<script src="https://js.stripe.com/v3"></script>
<script>
    let card;
    let stripe;
    const cardMessages = document.getElementById('card-messages');
    const payButton = document.getElementById('pay-button');
    const processing = document.getElementById('processing-payment');

    stripe = Stripe({{index .StringMap "stripe-key"}});

    function hidePayButtons() {
        payButton.classList.add('d-none');
        processing.classList.remove('d-none');
    }

    function showPayButtons() {
        payButton.classList.remove('d-none');
        processing.classList.add('d-none');
    }

    function showCardError(msg) {
        cardMessages.classList.add('alert-danger');
        cardMessages.classList.remove('alert-success');
        cardMessages.classList.remove('d-none');
        cardMessages.innerText = msg;
    }

    function showCardSuccess() {
        cardMessages.classList.remove('alert-danger');
        cardMessages.classList.add('alert-success');
        cardMessages.classList.remove('d-none');
        cardMessages.innerText = "Transaction success.";
    }

    function val() {
        let form = document.getElementById('charge_form');
        if (!form.checkValidity()) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }
        form.classList.add('was-validated');
        hidePayButtons();

        let amountToCharge = String(parseFloat(document.getElementById('amount').value));
        let payload = {
            amount: amountToCharge,
            currency: 'JPY'
        };

        const requestOptions = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        };

        fetch('http://localhost:4001/api/payment-intent', requestOptions)
            .then(res => res.text())
            .then(res => {
                let data;
                try {
                    data = JSON.parse(res);
                    stripe.confirmCardPayment(data.client_secret, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: document.getElementById('cardholder-name').value,
                            }
                        }
                    }).then(function(result) {
                        if (result.error) {
                            showCardError(result.error.message);
                            showPayButtons();
                        } else if (result.paymentIntent) {
                            if (result.paymentIntent.status === "succeeded") {
                                document.getElementById('payment_method').value = result.paymentIntent.payment_method_types[0];
                                document.getElementById('payment_intent').value = result.paymentIntent.id;
                                document.getElementById('payment_amount').value = result.paymentIntent.amount;
                                document.getElementById('payment_currency').value = result.paymentIntent.currency;
                                processing.classList.add('d-none');
                                showCardSuccess();
                            }
                        }
                    });

                } catch (err) {
                    console.log(err);
                    showCardError('Invalid response from payment gateway.')
                    showPayButtons();
                }
            });
    }

    (function() {
        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount('#card-element');

        // check for input errors
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.classList.remove('d-done');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-done');
                displayError.textContent = '';
            }
        });
    })();
</script>
{{end}}

